{"index.html": {"url": "index.html", "title": "介绍", "keywords": "", "body": "Oracle相关"}, "md/index.html": {"url": "md/index.html", "title": "Oracle 部署", "keywords": "", "body": "Oracle部署局域网内部环境使用非局域网内部环境请参考外网环境部署虚拟机还原到系统安装完毕快照1.部署本地yum源rm-rf/etc/yum.repos.d/*curl-o/etc/yum.repos.d/CentOS-Base.repohttp://192.168.2.251/Centos/CentOS7.repoyumcleanallyummakecache2.安装必需的安装包yuminstall-ylibaiobcflexnet-tools3.安装Oraclerpm-ivhhttp://192.168.2.251/Centos/oracle/oracle-xe-11.2.0-1.0.x86_64.rpm4.配置OralceOracleApplicationExpress的有效HTTP端口（默认值为8080）Oracle数据库侦听器的有效端口（默认为1521）SYS和SYSTEM管理员帐户密码：123456确认SYS和SYSTEM管理员帐户的密码：123456数据库在计算机启动时自动启动（下次重新引导）echo-e&quot;\\n\\n123456\\n123456\\ny&quot;|/etc/init.d/oracle-xeconfigure5.环境变量配置cat&gt;&gt;.bash_profile&lt;&lt;EOF./u01/app/oracle/product/11.2.0/xe/bin/oracle_env.shEOF让环境变量生效su-6.允许远程访问Oracle11gXEGUI进入SQL命令窗口sqlplus&quot;sys/123456assysdba&quot;&lt;&lt;EOFEXECDBMS_XDB.SETLISTENERLOCALACCESS(FALSE);EOF7.直接关闭防火墙systemctlstopfirewalldsystemctldisablefirewalld可通下面网址访问确认安装成功http://&lt;server-ip&gt;:8080/apex/f?p=4950:1用户名：system密码：1234568.一键部署rm-rf/etc/yum.repos.d/*curl-o/etc/yum.repos.d/CentOS-Base.repohttp://192.168.2.251/Centos/CentOS7.repoyumcleanallyummakecacheyuminstall-ylibaiobcflexnet-toolsrpm-ivhhttp://192.168.2.251/Centos/oracle/oracle-xe-11.2.0-1.0.x86_64.rpmecho-e&quot;\\n\\n123456\\n123456\\ny&quot;|/etc/init.d/oracle-xeconfigurecat&gt;&gt;.bash_profile&lt;&lt;EOF./u01/app/oracle/product/11.2.0/xe/bin/oracle_env.shEOFsu-sqlplus&quot;sys/123456assysdba&quot;&lt;&lt;EOFEXECDBMS_XDB.SETLISTENERLOCALACCESS(FALSE);EOFsystemctlstopfirewalldsystemctldisablefirewalld"}, "md/总结/语法总结.html": {"url": "md/总结/语法总结.html", "title": "Oracle 语法总结", "keywords": "", "body": "Oracle语法总结create\\(\\textcolor{#228B22}{create}\\begin{cases}\\textcolor{#228B22}{user}\\space用户名\\space\\textcolor{#228B22}{identified\\spaceby\\space}密码\\space[\\textcolor{#228B22}{account\\spacelock}|\\textcolor{#228B22}{unlock}];\\\\\\textcolor{#228B22}{table}\\space表名(列名\\space类型\\space[\\textcolor{#228B22}{null}|\\textcolor{#228B22}{not\\spacenull}]\\space[\\textcolor{#228B22}{constraint}]);\\\\[\\textcolor{#228B22}{or\\spacereplace}]\\space[\\textcolor{#228B22}{noforce}|\\textcolor{#228B22}{force}]\\space\\textcolor{#228B22}{view}\\space视图名\\space\\textcolor{#228B22}{as}\\spaceselect查询\\space[\\textcolor{#228B22}{with\\spaceread\\spaceonly}];\\\\[\\textcolor{#228B22}{unique}]\\space\\textcolor{#228B22}{index}\\space索引名\\space\\textcolor{#228B22}{on}\\space表名(列名\\space[,\\space列名…]);\\\\\\end{cases}\\)alter\\(\\textcolor{#228B22}{alter}\\begin{cases}\\textcolor{#228B22}{user}\\space用户名\\space{\\begin{cases}\\textcolor{#228B22}{identified\\spaceby}\\space新密码;\\\\\\textcolor{#228B22}{account\\spacelock}|\\textcolor{#228B22}{unlock};\\end{cases}}\\\\\\textcolor{#228B22}{table}\\space表名\\space{\\begin{cases}\\textcolor{#228B22}{add}\\space{\\begin{cases}列名\\space列类型\\space列约束;\\\\\\textcolor{#228B22}{constraint}\\space约束名\\space{\\begin{cases}\\textcolor{#228B22}{primary\\spacekey}(列);\\\\\\textcolor{#228B22}{foreign\\spacekey}(列)\\space\\textcolor{#228B22}{references}\\space参照表(参照列);\\\\\\textcolor{#228B22}{unique}(列);\\\\\\textcolor{#228B22}{check}(条件);\\\\\\end{cases}}\\end{cases}}\\\\\\textcolor{#228B22}{drop}\\space{\\begin{cases}\\textcolor{#228B22}{column}\\space列名;\\\\\\textcolor{#228B22}{constraint}\\space约束名;\\end{cases}}\\\\\\textcolor{#228B22}{modify}\\space列\\space{\\begin{cases}\\textcolor{#228B22}{not\\spacenull}|\\textcolor{#228B22}{null};\\\\\\textcolor{#228B22}{default}\\space默认值|\\textcolor{#228B22}{null};\\end{cases}}\\end{cases}}\\end{cases}\\)drop\\(\\textcolor{#228B22}{alter}\\begin{cases}\\textcolor{#228B22}{user}\\space用户名\\space[\\textcolor{#228B22}{cascade}];\\\\\\textcolor{#228B22}{table}\\space表名;\\\\\\textcolor{#228B22}{view}\\space视图名;\\\\\\textcolor{#228B22}{index}\\space索引名;\\\\\\end{cases}\\)语法结构：查询select[distinct]*|列|表达式fromAjoinB--内连接on表之间关联的条件rightjoinC--右外连接on表之间关联的条件leftjoinD--左外连接on表之间关联的条件fulljoinE--全连接on表之间关联的条件where结果筛选条件groupby分组列having分组后结果筛选orderby排序列[asc|desc];语法结构：创建用户createuser用户名identifiedby口令[accountlock|unlock];语法结构：修改用户的密码alteruser用户名identifiedby新密码;语法结构：修改用户处于锁定（非锁定）状态alteruser用户名accountlock|unlock;语法结构：删除用户dropuser用户名cascade;语法结构：授予权限grant角色|权限to用户|角色;语法结构：回收权限revoke角色|权限from用户|角色;语法结构：创建表createtable表名(列名1类型[null|notnull][constraint],类名2类型);语法结构：修改表名rename原表名to新表名;语法结构：添加列altertable表名add列名列类型列约束;语法结构：删除列altertable表名dropcolumn列名;语法结构：删除表droptable表名;语法结构：添加约束altertable表名addconstraint约束名约束内容;语法结构：删除约束altertable表名dropconstraint约束名;语法结构：：数据插入insertinto表名(列名1，列名2……)VALUES(值1，值2……)语法结构：：更新数据update表名set列名1=值,列名2=值where条件;语法结构：：删除数据deletefrom表名where条件;语法结构：：删除全部数据！!无法回滚，高危！truncatetable表名;"}, "md/概念.html": {"url": "md/概念.html", "title": "Oracle 概念", "keywords": "", "body": "Oracle概念"}, "md/数据库中的相关术语.html": {"url": "md/数据库中的相关术语.html", "title": "数据库中的相关术语", "keywords": "", "body": "数据库中的相关术语在Oracle数据库中每个数据库里面都包含很多对象，主要包括表、视图、存储过程、触发器以及约束。在这儿只简单介绍一下每一个术语的含义，在后面会详细地讲解这些术语的使用。1.表表，即在数据库中存放数据用的数据表。每一个数据库中都可以包含多张数据表，但是每一个数据表的名字都是不能重复的。表的一行代表一条记录，每一列都有一个列名，列名是唯一的，行与列的交叉点称为字段。例如，创建一个存放图书信息的表，表中信息包括图书编号、图书名称、图书作者、图书出版社、图书价格、备注。图书编号图书名称图书作者图书出版社图书价格备注0001Oracle10g刘一XX出版社200002Oracle11g王五XX出版社30在表中，第一行是表中每一列的列名，后两行每一行都是表中的一条记录。2.视图视图是数据库中的虚拟表。在视图中存放的是从数据库表中查询出来的记录，使用视图主要是为了方便信息查询，同时也能够缩短查询数据的时间。3.存储过程存储过程是由SQL语句和控制流语句组成的语句块。存储过程存储在数据库内，可由应用程序通过存储过程的名称调用执行。存储过程在开发软件时，可以把大量的数据操作放在服务器端的存储过程中，而只返回需要的数据，这样就减少了数据的传输量，速度也可以大大地提高。4.触发器触发器是特殊的存储过程，也是由SQL语句和程序控制语句组成的。但是，触发器在数据库中是不需调用而自动执行的。例如，在触发器中可以定义在修改某张表记录后执行触发器中的内容。5.约束约束是在数据库中保证数据库里表中数据完整性的手段。在Oracle中使用的约束有主键约束、外键约束、唯一约束、检查约束、非空约束、默认约束6个，其中主键约束和唯一约束都被认为是唯一约束，而外键约束被认为是参照约束。主键（PrimaryKey）约束主键约束在每个数据表中只能有一个，但是一个主键约束可以由多个列组成，通常把由多个列组成的主键又叫做复合主键或组合主键。主键约束可以保证主键列的数据没有重复值且值不为空，也可以说是唯一地标识表中的一条记录。外键（ForeignKey）约束外键约束之所以被认为是参照约束，是因为它主要用作把一个表中的数据和另一个表中的数据进行关联，表和表之间的关联是为了保证数据库中数据的完整性，使用外键保证数据的完整性，也叫参照完整性。下面就创建商品信息表和商品类型信息表，并建立两个表之间的外键约束。在商品信息表中“商品编号”是主键，而在商品类型信息表中“类型编号”是主键，当把商品信息表中的“商品编号”与商品类型信息表中的“类型编号”设置为外键约束后，在商品信息表中的类型信息就可以用商品类型信息表中的类型编号代替。设置完外键约束后，商品信息表中类型字段值必须是在商品类型信息表中存在的，同时当在商品类型信息表中删除一个类型时，如果商品信息表已经使用过该类型，那么商品类型信息表中的数据就无法被删除。这样就保证了数据库中数据的完整性。唯一（unique）约束唯一约束和主键约束一样都是设置表中的列不能重复的约束，区别就是一个表中只能有一个主键约束，而却可以有多个唯一约束。通常情况下设置唯一约束的目的就是使非主键列没有重复值。唯一约束与主键约束的另一个区别是如果数据表中的某一列中有空值，那么就不能把这个列设置为主键列，而可以设置成唯一约束。例如，在商品信息表中把商品编号设置成了主键，但是还要保证商品的名称不重名时，就可以把商品名称设置为唯一约束。检查（check）约束检查约束是用来指定表中列的值的取值范围的。例如，在员工信息表中员工年龄的列，如果要使员工年龄列的值为18～50，就可以使用检查约束进行设置，当输入的值不在有效范围内时，就会出现错误。这样就保证了数据库中数据的有效性。非空（notnull）约束非空约束是用来约束表中的列不允许为空的。例如，在员工信息表中员工身份证号码列，要求员工必须输入时，可以使用非空约束来保证该列不能为空。默认（default）约束插入数据没有赋值时，给一个默认值。6.事务我们可以把事务理解成一组SQL语句的集合。事务可以只包含一条SQL语句，也可以包含多条复杂的SQL语句，事务中的所有SQL语句被当做一个操作单元，换句话说，事务中的SQL语句要么都执行成功，要么全部执行失败，事务内的SQL语句被当做一个整体，被当做一个原子进行操作。6.1.事务的ACID特性事务有4个特性，它们分别是原子性、一致性、隔离性、持久性。原子性(atomicity)整个事务中的所有操作要么全部执行成功，要么全部执行失败后回滚到最初状态。事务的原子性是指，事务中程序是数据库的逻辑工作单位，它对数据的修改要么全部执行，要么完全不执行。原子也意味着不可分割，不管有多少程序，只要在同一个事务中，那么它们就是一个整体，如果都执行成功才意味着该事务成功，而有一个操作失败，那么同一个事务中的其他操作即使执行成功也没有用，事务会使其全部撤销。一致性(consistency)数据库总是从一个一致性状态转为另一个一致性状态。事务的一致性指事务执行的前后数据库都必须处于一致性状态，它是相对脏读而言的。只有在事务完成后才能被所有使用者看见，保证了数据的完整性。例如在银行转账时，从A账户取款但没有放到B账户中时数据是不一致的，同时也是不完整的，其他使用者此时不能看到A中修改后的数据，只有存到B账户中，交易完成并提交事务，这时才算数据一致，所有用户也会看到修改后的数据。隔离性(isolation)一个事务在提交之前所做出的的操作是否能为其他事务可见，由于不同的场景需求不同，所以针对隔离性来说，有不同的隔离级别。隔离性是指并发事务之间不能相互的干扰。也就是说，一个事务操作的数据不会被其他事务看到和操作。持久性(durability)事务一旦提交，事务所做出的修改将会永久保存，此时即使数据库崩溃，修改的数据也不会丢失。事务的提交很重要，但不建议频繁地提交事务，因为每次提交事务都需要时间，如果1W行记录，每行记录都提交事务，那么事务本身将是性能的主要消耗者。所以，适当地减少事务提交次数比较重要。例如，可以每1K行提交一次。"}, "md/范式.html": {"url": "md/范式.html", "title": "范式", "keywords": "", "body": "范式—设计关系型数据库的准则关系型数据库是目前流行和使用广泛的数据库，关系型数据库的设计标准就是数据库的范式，范式分别有第一范式、第二范式、第三范式。1.　第一范式—关系型数据库设计的第一步目前，只要是使用关系型数据库来设计数据库，都能够满足数据库设计的第一范式。第一范式（1NF）就是数据库表中的字段都是单一属性的，不可再分。这个单一属性可以是数据库中任何一种基本数据类型，如整型、字符型、日期型等。只要是关系型数据库都会满足第一范式。例如，一个产品信息表(product)，描述产品信息的字段有产品编号、产品名称、产品数量、产品价格、产品描述，如表3.4所示，那么这个产品信息表就满足第一范式的要求：每一个字段都是不可再分的单一属性。2.　第二范式—关系型数据库设计的第二步第二范式是在第一范式的基础上进一步对关系型数据库进行规范，官方给出第二范式的定义是要求在数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖。意思就是说在第二范式中组合主键（AB）里面的A或者B与其他字段不能存在组合重复。为解决这个问题，通常的做法是不用组合主键，添加一个编号列，作为单一主键即可满足第二范式。如果不想添加编号列，就满足组合主键（AB）里面的A或者B与其他字段不能存在组合重复。例如，设计一个购物信息表，字段包括客户编号、产品名称、产品数量、产品类型、产品价格、客户类型。如果用客户编号和产品名称作为组合主键，那么在组合主键中产品名称和产品类型存在一定关系，是由产品名称决定产品的类型，所以不符合第二范式的要求，如果不按照第二范式的要求设计表，就会出现以下4个问题：数据冗余同一个产品由n个顾客购买，“产品类型”就重复n-1次；同一个顾客购买了多件产品，那么就会多次记录顾客的个人信息。更新异常若调整了某个产品的类型，数据表中所有行的“产品类型”值都要更新，否则会出现同一个产品不同类型的情况。插入异常假设新进了一个产品，暂时还没有人购买。这样，由于没有人购买，产品的名称和类型也无法记录到数据库中。删除异常假设一批顾客把已经购买完的商品退货，这些产品信息就从数据表中删除了。但是，与此同时，产品名称和产品类型等信息也被删除了。这样就导致了删除异常。为了消除数据冗余、更新异常、插入异常和删除异常，可以把现有的一个表拆分成3张表：第1张表是产品类型表，表中有产品类型、产品名称。第2张表是客户信息表，表中有客户编号、客户类型。第3张表是产品信息表，表中有产品名称、产品类型、产品价格、产品数量。3.　第三范式—关系型数据库设计的第三步第三范式是在第二范式的基础上对数据库设计进行规范，第三范式的要求是数据表中不存在非关键字段对任一候选关键字段的传递函数依赖。所谓传递函数依赖，指的是如果存在A决定B、B决定C的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在依赖关系，假定员工信息表为employee（员工编号，姓名，年龄，所在部门，部门电话），使用员工编号作为员工信息的主键，那么就存在决定关系：员工编号就决定了姓名、年龄、所在部门、部门电话这些字段。从上面的关系可以看出，在表中有一个主键，数据表的设计符合第二范式的要求。但是它不符合第三范式的要求，因为存在决定关系：员工编号就决定了所在部门，所在部门又决定了所在部门的电话，那么就存在了传递函数依赖关系，即员工编号决定部门电话，那么也会出现不满足第二范式时的数据冗余和更新、插入、删除异常的情况。为了满足第三范式的要求，必须把员工信息表拆分成如下两个数据表：员工表：员工编号、姓名、年龄、所在部门；部门表：部门名称、部门电话。除了上面的三种范式以外，还有一种范式经常使用，即鲍依斯-科得范式（BCNF）。它建立在第三范式的基础上，如果数据库表中不存在任何字段对任一候选关键字段的传递函数依赖，那么就符合BCNF范式。"}, "md/E-R图.html": {"url": "md/E-R图.html", "title": "E-R图", "keywords": "", "body": "E-R图E-R（Entity-Relationship）图又叫实体-联系图，是描述现实世界的概念模型。构成E-R图的基本要素是实体、属性和联系。下面就来详细地讲解如何绘制E-R图。1.绘制E-R图的基本要素在E-R图中涉及的基本要素有实体、联系以及属性，下面就对这3个要素进行详细说明。1.1.实体（Entity）实体是客观存在并可以相互区别的事物。实体既可以是人、物，也可以是抽象的概念。例如，一个学生、一个老师、一个产品都可以认为是实体。相同类型的实体可以构成一个实体集。例如，全体学生就是一个实体集。在E-R图中实体一般用矩形表示，矩形框内写明实体的名称。例如，写一个老师的实体，如图所示。1.2.属性（Attribute）属性是实体所具有的某一特性，一个实体可由若干个属性来刻画。在E-R图中一般用椭圆形表示，并用无向边将其与相应的实体连接起来。例如，产品的名称、价格、类型等都是属性。例如，给老师实体加上属性：姓名、年龄、所教专业、所属院系，如图所示。1.3.联系（Relationship）联系，即在信息世界中反映实体内部或实体之间的联系。实体内部的联系通常是指组成实体的各属性之间的联系；实体之间的联系通常是指不同实体集之间的联系。在E-R图中用菱形表示，菱形框内写明联系名，并用无向边分别与有关实体连接起来，同时在无向边旁标上联系的类型。实体之间存在着3种联系类型，分别是一对一、一对多、多对多，它们反映到E-R图中即为相应的联系类型，即1:1、1:n和m:n。一对一关系（1:1）一对一关系是指实体集A与实体集B，A中的每一个实体至多与B实体集中一个实体有联系；反之，在实体集B中的每个实体至多与实体集A中一个实体有联系。例如，给学生排座，“学生”实体和“座位”实体之间的关系，每一个学生最多可以分得一个座位，同时每一个座位最多只能有一个学生来坐。用图形表示如图所示。一对多关系（1:n）一对多关系是指实体集A与实体集B中至少有n（n＞0）个实体有联系，并且实体集B中每一个实体至多与实体集A中一个实体有联系。例如，“学生”实体和“班级”实体之间的关系，一个班级里面可以有若干个学生，而每一个学生都属于这个班级。用图形表示如图所示。多对多关系（m:n）多对多关系是指实体集A中的每一个实体与实体集B中至少m（m＞0）个实体有联系，并且实体集B中的每一个实体与实体集A中的至少n（n＞0）个实体有联系。例如，顾客在商场购买商品，顾客与商品之间就是多对多的关系，每一个顾客都可以购买多种商品，而每一种商品又可以被多个顾客购买。用图形表示如图所示。其实，实体之间的这3种关系，不仅对两个实体有效，也可以表示多个实体之间的关系。2.E-R图绘制实例绘制一个网上购物系统的E-R图，在网上购物系统中简单分析出顾客、商品、商品类型、订单4个实体。下面分别绘制每个实体属性图并在最后绘制一个整体的E-R图。顾客实体属性图顾客实体主要包括用户编号、姓名、年龄、性别、身份证号、联系方式、送货地址、银行卡卡号8个属性，实体属性图如图所示。商品实体属性图商品实体主要包括商品编号、商品名称、商品价格、商品数量、商品描述5个属性，实体属性图如图所示。商品类型实体属性图商品类型实体主要包括商品类型编号和商品类型两个属性，实体属性图如图所示。订单实体属性图订单实体主要包括订单编号、送货地址、顾客姓名、是否付款、联系方式、所购商品6个属性，实体属性图如图所示。网上购物系统E-R图在绘制整体的E-R图之前，先要了解一下网上购物系统的购物流程。首先由顾客选择要购买的商品，之后把购买商品的列表生成一个订单，然后网站的售后人员会根据订单的地址送货，在这个网上购物系统里要求一个顾客每次只能生成一个订单。那么，这4个实体之间是什么关系呢？首先商品和顾客之间的关系是多对多的关系，多个商品可以被一个顾客购买，同时多个顾客也可以购买相同的商品；订单和商品之间的关系是一对多的关系，一个订单是由多个商品组成的，多个商品组成一个订单；顾客和订单之间的关系是一对一的关系，一个顾客可以生成一个订单，一个订单只能属于一个顾客；商品和商品类型之间的关系是一对一的关系，一个商品属于一种商品类型。网上购物系统的E-R图如图所示。"}, "md/Oracle数据类型.html": {"url": "md/Oracle数据类型.html", "title": "Oracle 数据类型", "keywords": "", "body": "Oracle数据类型官网文档要使用数据库来存储数据，首先就要知道这个数据库都能存储什么类型的数据。数据类型是在向数据表中存储数据前必须设定好的，就像如果要使用记事本查看文件内容，那么文件就要是文本的，不能有图片，否则图片是查看不了的，因为记事本中只能查看文本文件。在Oracle中提供的数据类型非常多，下面介绍常用的数据类型，并把数据类型分为字符型、数字型、日期类型和其他数据类型4类进行讲解。1.字符型字符型在Oracle中有varchar2、char、nchar、nvarchar2和long五种，它们在数据库中是以ASCII码的格式存储的。VARCHAR2(size[BYTE|CHAR])具有最大长度size字节或字符的可变长度字符串。您必须指定size的VARCHAR2。最小值size为1个字节或1个字符。最大尺寸为：32767字节或字符ifMAX_STRING_SIZE=EXTENDED如果是4000字节或字符MAX_STRING_SIZE=STANDARD有关初始化参数的更多信息，请参阅扩展数据类型MAX_STRING_SIZE。BYTE表示该列将具有字节长度语义。CHAR表示该列将具有字符语义。NVARCHAR2(size)具有最大长度size字符的可变长度Unicode字符串。您必须指定size的NVARCHAR2。字节数可以是最多两次size用于AL16UTF16编码和三次size用于UTF8编码。最大值size由国家字符集定义决定，上限为：32767字节如果MAX_STRING_SIZE=EXTENDED如果是4000字节MAX_STRING_SIZE=STANDARD有关初始化参数的更多信息，请参阅扩展数据类型MAX_STRING_SIZE。CHAR[(size[BYTE|CHAR])]长度size字节或字符的定长字符数据。最大值size为2000个字节或字符。默认值和最小值size为1个字节。BYTE并CHAR具有相同的语义VARCHAR2。NCHAR[(size)]长度字符的定长字符数据size。字节数可以是最多两次size用于AL16UTF16编码和三次size用于UTF8编码。最大值size由国家字符集定义决定，上限为2000字节。默认值和最小值size为1个字符。LONG可变长度的字符数据最多2千兆字节，或\\(2^31-1\\)字节。提供向后兼容性。2.数字型数字型在Oracle11g中常用的有number和float类型两种。NUMBER[(p[,s])]具有精度p和保留小数位数s。精度p范围为1到38。小数位数s范围为-84到127。精度和小数位数都是十进制数字。FLOAT[(p)]存储的精度是按二进制计算的。精度范围为二进制的1~1263.日期类型日期类型在Oracle11g中常用的有date和timestamp两种类型，可以用它们来存放日期和时间。DATE有效日期范围从公元前4712年1月1日到公元9999年12月31日。默认格式由NLS_DATE_FORMAT参数显式确定或由NLS_TERRITORY参数隐式确定。大小固定为7个字节。此数据类型包含日期时间字段YEAR，MONTH，DAY，HOUR，MINUTE，和SECOND。它没有小数秒或时区。TIMESTAMP[(fractional_seconds_precision)]日期的年，月和日值，以及小时，分钟和秒的时间值，其中fractional_seconds_precision是SECOND日期时间字段的小数部分中的位数。可接受的值为fractional_seconds_precision0到9.默认值为6.默认格式由NLS_TIMESTAMP_FORMAT参数显式确定或由NLS_TERRITORY参数隐式确定。大小为7或11个字节，具体取决于精度。此数据类型包含日期时间字段YEAR，MONTH，DAY，HOUR，MINUTE，和SECOND。它包含小数秒但没有时区。4.其他数据类型除了上面讲过的字符型、数字型、日期类型之外，在Oracle11g中还有存放大数据的数据类型以及存放二进制文件的数据类型。BLOB二进制大对象。最大大小为（4千兆字节-1）*（数据库块大小）"}, "md/function/function.html": {"url": "md/function/function.html", "title": "Oracle 常用函数", "keywords": "", "body": "Oracle常用函数Oracle有多种内置函数，本文将重点介绍其中的两种，它们分别是单行函数和聚合函数。这两种类型的函数使用频率比较高。单行函数是指当查询表或视图时每行都能返回一个结果，可用于SELECT、WHERE、ORDERBY等子句中。而聚合函数是作用在多行记录上返回一个结果，可用于带GROUPBY或HAVING子句的查询中。单行函数数量比较多，这里介绍其中常用的几种类型，它们分别是数值型函数、字符型函数、日期型函数、转换函数等。介绍函数之前先简单介绍一下Oracle的DUAL表。该表是Oracle中真实存在的一个表，任何用户都可以读取，多数情况下可以用在没有目标的SELECT查询语句中。它本身只包含了一个DUMMY字段。DUAL表对Oracle很重要，用户不要试图删除该表，一旦删除，Oracle将无法启动。下面的函数讲解中会以DUAL表作为测试语句的目标表。官方文档数值类型函数：主要包括ABS、MOD、SIGN、POWER、SQRT等。字符类型函数：主要包括LENGTH、SUBSTR、UPPER、LOWER、TRIM等。日期类型函数：主要包括SYSDATE、ADD_MONTHS、LAST_DAY、NEXT_DAY、ROUND、TRUNC等。转换函数：主要包括CAST、TO_CHAR、TO_DATE、TO_NUMBER等。NULL函数：主要包括COALESCE、NVL、NVL2等。聚合函数：主要包括AVG、COUNT、MAX、MIN、SUM等。"}, "md/function/数值型函数.html": {"url": "md/function/数值型函数.html", "title": "数值型函数", "keywords": "", "body": "数值型函数数值类型函数可以输入数字，并返回一个数值。大多数可以达到小数点后38位。一部分则支持30位或36位小数。本节主要介绍一些常用的数值函数。1.ABS(n)函数用于返回绝对值。该函数输入一个参数，参数类型为数值型，假如参数为可以隐式转换成数值类型，那么也可以。selectabs(100),abs(-100),abs(&#39;100&#39;)fromdual;2.ROUND（fornumber）函数。该函数的具体原型是ROUND(n,integer)。它将数值n四舍五入成第二个参数指定的形式的十进制数。参数integer要求是整数，如果不是整数，那么它将被自动截取为整数部分。当integer为正整数时，表示n被四舍五入为integer位小数。如果该参数为负数，则n被四舍五入至小数点向左integer位。示例脚本如下：selectround(100.23456,4),round(100.23456,2.56),round(155.23456,-2)fromdual;3.TRUNC（fornumber）函数。该函数的具体原型是TRUNC(n,integer)。它把数值n根据integer的值进行截取，截取时和integer的正负有关。参数integer要求是整数，如果不是整数，那么它将被自动截取为整数部分。当integer为正整数时，表示n将截取到integer位小数；如果integer为负数，则截取到小数点左第integer位，被截取部分用0代替。示例脚本如下：selecttrunc(100.23456,4),trunc(100.23456,2.56),trunc(155.23456,-2),trunc(155.23456)fromdual;4.MOD(n2,n1)函数该函数表示返回n2除以n1的余数。参数为任意数值或可以隐式转成数值的类型。如果n1为0，那么该函数将返回n2。selectmod(5,2),mod(8/3,5),mod(&#39;10&#39;,5),mod(-10,6),mod(1,0)fromdual;5.CEIL(n)函数其返回结果是大于等于输入参数的最小整数。该输入参数要求是十进制数值类型，或可以隐式地转换成数值的类型，可以是非整数。示例脚本如下：selectceil(10),ceil(&#39;10.5&#39;),ceil(-10.2)fromdual;6.SIGN(n)函数返回参数n的符号。正数返回1，0返回0，负数返回-1。但如果n为BINARY_FLOAT或BINARY_DOUBLE类型时，n＞=0或者n=NaN函数会返回1。selectsign(&#39;9&#39;),sign(-9),sign(0.00),sign(-2*&#39;9&#39;)fromdual;7.COS(n)函数用于返回参数n的余弦，n为弧度表示的角度。示例脚本如下：selectcos(3.1415926),cos(&#39;3.1415926&#39;)fromdual;与此类函数类似的还有如下几个。ACOS(n)：返回n的反余弦值。COSH(n)：返回n的双曲余弦值。SIN(n)：返回n的正弦值。SINH(n)：返回n的双曲正弦值。ASIN(n)：返回n的反正弦值。TAN(n)：返回n的正切值。TANH(n)：返回n的双曲正切值。ATAN(n)：返回n的反正切值。8.SQRT(n)函数。该函数返回n的平方根。n为数字类型的时候不能为负数，将返回一个实数，当n为BINARY_FLOAT或BINARY_DOUBLE类型时，n＜0将返回NaN。示例脚本如下：SELECTSQRT(100),SQRT(&#39;53.9&#39;)FROMDUAL;9.POWER(n2,n1)函数。利用该函数可以得到n2的n1次幂的结果。这两个参数为任意数值，但如果n2为负数，那么n1必须为整数。示例脚本如下：selectpower(5,2),power(&#39;5&#39;,2),power(5.5,2.5),power(-5,2),5*5fromdual;与其相近的函数有：EXP(n)函数，表示返回e的n次幂，e为数学常量，e=2.71828183...。10.LOG(n1,n2)函数。该函数可以返回以n1为底n2的对数，n1是除1和0以外的任意正数。n2为正数。示例脚本如下：selectlog(10,100),log(10.5,&#39;100&#39;),power(10,2)fromdual;与其相近的函数有：LN(n)函数，表示返回n的自然对数。n要求大于0。"}, "md/function/字符型函数.html": {"url": "md/function/字符型函数.html", "title": "字符型函数", "keywords": "", "body": "字符型函数以下函数全都接收的是字符族类型的参数(CHR除外），其中大部分返回字符类型数据，小部分返回数字类型数据。1.SUBSTR函数。该函数提供截取字符串的功能，而且该函数有很多的扩展形式，其具体语句结构是{[SUBSTR]|[SUBSTRB]|[SUBSTRC]|[SUBSTR2]|[SUBSTR4]}(char,position[,substring_length])。各参数表示含义如下：SUBSTR：以字符为单位。SUBSTRB：以字节为单位。SUBSTRC：以unicode字符为单位。SUBSTR2：以UCS2代码点为单位。SUBSTR4：以UCS4代码点为单位。char：原始字符串。position：要截取字符串的开始位置。初始为1，如果该值为负数，则表示从char的右边算起。substring_length：截取的长度。具体的示例脚本如下，这里仅以SUBSTR操作为例。selectsubstr(&#39;ABCDE我FGHI&#39;,5,2),substr(&#39;ABCDE我FGHI&#39;,-5,2)fromdual;2.LENGTH函数。该函数可以得到指定字符串的长度，返回类型是数字。同样的，LENGTH函数也具有扩展形式，具体结构是{[LENGTH]|[LENGTHB]|[LENGTHC]|[LENGTH2]|[LENGTH4]}(char)，各项参数含义可以参考前面介绍过的函数，这里不再过多解释，其中char是参数。具体的示例脚本如下，这里仅以LENGTH操作为例。selectlength(&#39;ABCDE我FGHI&#39;)fromdual;3.CONCAT(char1,char2)函数。该函数连接两个参数并返回。char2将连接到char1的尾部。效果和连接符||相似。参数类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2、CLOB、NCLOB。示例脚本如下：selectconcat(&#39;我的&#39;,&#39;测试！&#39;),&#39;我的&#39;||&#39;测试！&#39;fromdual;4.INSTR函数。该函数可以让我们在指定的字符串中搜索是否存在另一个字符串。其具体语句结构是{[INSTR]|[INSTRB]|[INSTRC]|[INSTR2]|[INSTR4]}(string,substring[,position[,occurrence]])。该函数也具有扩展形式，各项参数表示含义如下：INSTR：以字符为单位。INSTRB：以字节为单位。INSTRC：以unicode字符为单位。INSTR2：以UCS2代码点为单位。INSTR4：以UCS4代码点为单位。string：待搜索的字符串。substring：要搜索的字符串。position：搜索的开始位置，默认为1，表示字符串左边第一个位置；如果为负数，则表示字符串的右边位置为起始位置。occurrence：substring第几次出现，默认是1。具体的示例脚本如下，这里仅以INSTR操作为例。selectinstr(&#39;thisisa测试！&#39;,&#39;测&#39;),instr(&#39;thisisa测试！&#39;,&#39;s&#39;,-1)fromdual;5.UPPER(char)函数。该函数将指定的参数全部转换成大写字母。参数类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2、CLOB、NCLOB。示例脚本如下：selectupper(&#39;c&#39;),upper(&#39;abcd&#39;),upper(&#39;thisisatest&#39;)fromdual;6.LOWER(char)函数。该函数将指定的参数全部转换成小写字母。参数类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2、CLOB、NCLOB。示例脚本如下：selectlower(&#39;A&#39;),lower(&#39;ABCD&#39;),lower(&#39;THISISATEST&#39;)fromdual;7.INITCAP(char)函数。该函数参数的所有单词首字母转换成大写字母。参数类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2。示例脚本如下：selectinitcap(&#39;thisisatest&#39;)fromdual;8.REPLACE函数。函数具体语法结构是REPLACE(char,search_string[,replacement_string])，是一个替换字符串的函数。函数中有三个参数，具体代表的含义如下：char：表示搜索的目标字符串。search_string：在目标字符串中要搜索的字符串。replacement_string：该参数可选，用它可替代被搜索到的字符串，如果该参数不用，则表示从char参数中删除search_string字符串。具体的示例脚本如下：selectreplace(&#39;thisisatest&#39;,&#39;tes&#39;,&#39;resul&#39;)fromdual;9.TRIM函数。该函数将删除指定的前缀或尾随的字符，默认删除空格。其具体语法结构是TRIM([LEADING|TRAILING|BOTH](trim_characterFROM)trim_source)，各参数介绍如下：LEADING：删除trim_source的前缀字符。TRAILING：删除trim_source的后缀字符。BOTH：删除trim_source的前缀和后缀字符。trim_character：删除的指定字符，默认删除空格。trim_source：被操作的字符串。具体的示例脚本如下：selecttrim(trailing&#39;t&#39;from&#39;test&#39;),trim(&#39;test&#39;)fromdual;10.RTRIM(char[,set])函数。与RPAD函数相反，该函数会提供将char右边出现在set中的字符删除掉。如果set没有，则默认删除空格。具体的示例脚本如下：selectrtrim(&#39;test&#39;),rtrim(&#39;test*ffs&#39;,&#39;fs*&#39;)fromdual;11.LTRIM(char[,set])函数。与RTRIM函数相似，该函数会提供将char左边出现在set中的字符删除掉。如果set没有，则默认删除空格。具体的示例脚本如下：selectltrim(&#39;ftest&#39;,&#39;f&#39;)fromdual;12.CHR(n[USINGNCHAR_CS])函数。根据相应的字符集，把给定的ASCII码转换为字符。USINGNCHAR_CS指明字符集。以下示例用默认字符集，示例脚本如下：selectchr(65)||chr(66)||chr(67)abc,chr(54678)fromdual;13.ASCII(char)函数。返回参数首字母的ASCII码值。与CHR函数相反。参数char的类型可以是CHAR、VARCHAR2、NCHAR或NVARCHAR2。该返回值总是以用户使用的字符集为基础的，如果用户的数据库字符集是7位的ASCII值，那就得到一ASCII码值。示例脚本如下：selectascii(&#39;明&#39;),ascii(&#39;Adb&#39;),ascii(&#39;ABC&#39;)fromdual;"}, "md/function/日期型函数.html": {"url": "md/function/日期型函数.html", "title": "日期型函数", "keywords": "", "body": "日期型函数日期类型的函数操作日期、时间类型的相关数据，并返回日期或数字类型的数据。1.SYSDATE函数。该函数没有参数，可以得到系统的当前日期，是很常用的函数。下面示例演示了将得到的系统时间进行格式化。示例脚本如下：selectsysdate,to_char(sysdate,&#39;YYYY-MM-DDHH24:MI:SS&#39;)fromdual;脚本中使用了TO_CHAR()函数，该函数具体用法后面会介绍，严格来说它属于转换函数。2.增加天数selectsysdate+2fromdual;3.ADD_MONTHS(date,integer)函数。该函数将返回在指定的日期上加一个月份数后的日期。各参数具体含义如下：date：指定的日期。integer：要加的月份数，该值如果为负数，则表示减去的月份数。该函数有些地方需要注意，当指定的日期是月的最后一天时，最后函数返回的结果也将是新月的最后一天。而如果新的月份比指定日期月份的天数少，则函数将自动回调有效日期。示例脚本如下：selectto_char(add_months(to_date(&#39;2009-9-15&#39;,&#39;YYYY-MM-DD&#39;),1),&#39;YYYY-MM-DD&#39;),to_char(add_months(to_date(&#39;2009-9-30&#39;,&#39;YYYY-MM-DD&#39;),1),&#39;YYYY-MM-DD&#39;),to_char(add_months(to_date(&#39;2010-1-30&#39;,&#39;YYYY-MM-DD&#39;),1),&#39;YYYY-MM-DD&#39;)fromdual;脚本中使用了TO_DATE()函数，该函数具体用法后面会介绍，它属于转换函数。4.MONTHS_BETWEEN(date1,date2)函数。该函数返回date1和date2之间的月份数。函数两个参数都为日期型数据。当date1＞date2时，如果两个参数表示日期是某月中的同一天，或它们都是某月中的最后一天，则该函数返回一整型数；否则，将返回小数。当date1＜date2时，则返回一负值。示例脚本如下：selectmonths_between(to_date(&#39;2010-7-1&#39;,&#39;YYYY-MM-DD&#39;),to_date(&#39;2010-6-1&#39;,&#39;YYYY-MM-DD&#39;))one,months_between(to_date(&#39;2010-5-31&#39;,&#39;YYYY-MM-DD&#39;),to_date(&#39;2010-4-30&#39;,&#39;YYYY-MM-DD&#39;))two,months_between(to_date(&#39;2010-5-31&#39;,&#39;YYYY-MM-DD&#39;),to_date(&#39;2010-9-30&#39;,&#39;YYYY-MM-DD&#39;))threefromdual;5.LAST_DAY(date)函数。该函数返回参数指定日期对应月份的最后一天。示例脚本如下：selectlast_day(sysdate)fromdual;6.SESSIONTIMEZONE函数。该函数没有参数，可以返回当前会话的时区。示例脚本如下：selectsessiontimezonefromdual;7.NEXT_DAY(date,char)函数。该函数返回当前日期向后的一周char的对应日期，char表示的是星期几，全称和缩写都允许。但必须有效。示例脚本如下：selectsysdate，next_day(sysdate,&#39;星期一&#39;)fromdual;8.EXTRACT(datetime)函数。该函数可以从指定的时间当中提取到指定的日期部分，例如从给定的日期得到年、月、分等。示例脚本如下：selectextract(yearfromsysdate)year,extract(minutefromTIMESTAMP&#39;2010-6-1812:23:10&#39;)min,extract(secondfromTIMESTAMP&#39;2010-6-1812:23:10&#39;)secfromdual;9.SYSTIMESTAMP函数。该函数没有参数，返回系统时间，该时间包含时区信息，精确到微秒。返回类型为带时区信息的TIMESTAMP类型。示例脚本如下：selectsystimestampfromdual;"}, "md/function/转换函数.html": {"url": "md/function/转换函数.html", "title": "转换函数", "keywords": "", "body": "转换函数转换函数可以完成不同数据类型之间的转换，是平常使用比较多的函数类型之一。本节将介绍平常使用率较高的转换函数。1.TO_CHAR(number)函数。该函数将一个数值型参数转换成字符型数据。其具体语法结构是TO_CHAR(n,[,fmt[,nlsparam]])，各参数表示含义如下：n：数值型数据。fmt：要转成字符的格式。nlsparam：由该参数指定fmt的特征。通常包括小数点字符、组分隔符、本地钱币符号。该函数如果想用的好需要了解多方面的知识，这里不做详细介绍。示例脚本如下：selectto_char(16.89),to_char(16.89,&#39;99.9&#39;)fromdual;2.TO_CHAR(date)函数。该函数将一个日期型数据转换成一个字符型数据。它同前面介绍的同名函数一样，只不过转换的对象变化了。具体的语法结构是TO_CHAR(n,[,fmt[,nlsparam]])，各参数具体含义如下：n：日期类型数据。fmt：要转成字符的格式。nlsparam：使用的语言类型。示例脚本如下：selectto_char(sysdate,&#39;YYYY-MM-DD&#39;),to_char(sysdate,&#39;HH24:MI:SS&#39;),to_char(sysdate,&#39;D&#39;),to_char(sysdate,&#39;WW&#39;),to_char(sysdate,&#39;Q&#39;),to_char(sysdate)fromdual;3.TO_DATE函数。该函数可将字符型数据转换成日期型数据。函数的具体语法结构是TO_DATE(char[,fmt[,nlsparam]])。各参数的具体含义如下：char：待转换的字符。类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2。fmt：表示转换的格式。nlsparam：控制格式化时使用的语言类型。示例脚本如下：selectto_char(to_date(&#39;2010-7-1&#39;,&#39;YYYY-MM-DD&#39;),&#39;MONTH&#39;)fromdual;4.TO_NUMBER函数。该函数将字符串转成数字。语法结构是TO_NUMBER(expr[,fmt[,nlsparam]])，各参数表示的具体含义如下：expr：待转换的字符，其类型可以是CHAR、VARCHAR2、NCHAR、NVARCHAR2。fmt：指定转换的数字格式。nlsparam：该参数指定fmt的特征。通常包括小数点字符、组分隔符、本地钱币符号。示例脚本如下：selectto_number(&#39;2456.304&#39;,&#39;9999.999&#39;)fromdual;5.数字格式元素数字格式模型由一个或多个数字格式元素组成。下表列出了数字格式模型的元素。元素举例说明,（逗号）9,999返回指定位置的逗号。可以在数字格式模型中指定多个逗号。限制：逗号元素无法启动数字格式模型。逗号不能出现在数字格式模型中的十进制字符或句点的右侧。.（句号）99.99返回小数点，即指定位置的句点（.）。限制：只能在数字格式模型中指定一个句点。$$9999返回带有前导美元符号的值。009999990返回前导零。返回尾随零。99999返回具有指定位数的值，如果为正数，则前导空格；如果为负，则返回前导减号。前导零是空白的，除了零值，它返回零作为定点数的整数部分。BB9999当整数部分为零时（无论格式模型中的零如何），返回定点数的整数部分的空白。CC999在指定位置返回ISO货币符号（NLS_ISO_CURRENCY参数的当前值）。D99D99在指定位置返回十进制字符，即NLS_NUMERIC_CHARACTER参数的当前值。默认值为句点（.）。限制：只能在数字格式模型中指定一个十进制字符。EEEE9.9EEEE使用科学计数法返回值。G9G999返回指定位置的组分隔符（NLS_NUMERIC_CHARACTER参数的当前值）。可以在数字格式模型中指定多个组分隔符。限制：组分隔符不能出现在数字格式模型中的小数字符或句点的右侧。LL999在指定位置返回本地货币符号（NLS_CURRENCY参数的当前值）。MI9999MI使用尾随减号（-）返回负值。返回带有尾随空白的正值。限制：MI格式元素只能出现在数字格式模型的最后位置。PR9999PR返回尖括号&lt;&gt;中的负值。返回带有前导和尾随空白的正值。限制：PR格式元素只能出现在数字格式模型的最后位置。RNRN以大写形式返回罗马数字的值。rnrn以小写形式返回罗马数字的值。值可以是1到3999之间的整数。SS99999999S使用前导减号（-）返回负值。使用前导加号（+）返回正值。使用尾随减号（-）返回负值。使用尾随加号（+）返回正值。限制：S格式元素只能出现在数字格式模型的第一个或最后一个位置。TMTM文本最小数字格式模型返回（十进制输出）可能的最小字符数。此元素不区分大小写。默认值为TM9，它以固定表示法返回数字，除非输出超过64个字符。如果输出超过64个字符，则Oracle数据库会自动以科学计数形式返回该数字。限制：不能在此元素之前添加任何其他元素。只能使用一个9或一个E（或e）来跟随此元素，但不能与这些元素的任何组合一起使用。以下语句返回错误：SELECTTO_CHAR(1234,'TM9e')FROMDUAL;UU9999在指定位置返回欧元（或其他）双重货币符号，由NLS_DUAL_CURRENCY参数的当前值确定。V999V99返回一个乘以10n的值（如果需要，将其四舍五入），其中n是9之后的数字V。XXXXX返回指定位数的十六进制值。如果指定的数字不是整数，则Oracle数据库将其舍入为整数。限制：此元素仅接受正值或0.负值返回错误。可以在此元素之前仅使用0（返回前导零）或FM。任何其他元素都会返回错误。如果既不指定0也不指定带有X的FM，则返回总是有一个前导空白。6.日期时间格式元素日期时间格式模型由一个或多个日期时间格式元素组成。下表列出了日期格式模型的元素。元素说明-/,.;:\"文本\"在结果中复制标点符号和引用的文本。ADA.D.AD指示有或没有句点。AMA.M.上午的简写BCB.C.表示公元前CCSCC世纪。如果4位数年份的最后2位数字介于01和99（含）之间，则该世纪比该年份的前2位数大1。如果4位数年份的最后2位数字是00，则该世纪与该年份的前2位数字相同。例如，2002年返回21；2000年回归20。D星期几（1-7）。DAY一周之中的某天，不过返回的是星期几而已，这和语言设置有关系，在中国环境NLS_DATE_LANGUAGE=SIMPLIFIEDCHINESE，用星期一到星期天表示DD月份中的某天(1-31)DDD年份中的某天（1-366）DL返回长的日期格式。受到NLS_TERRITORY,NLS_LANGUAGE参数控制。例2008年4月28日星期一限制：只能使用TS元素指定此格式，以空格分隔。DS返回短的日期格式。受到NLS_TERRITORY,NLS_LANGUAGE参数控制。例如2008-04-28限制：只能使用TS元素指定此格式，以空格分隔。DY日期的简称，就是星期几（当然这指的是中国环境下）E缩写时代名称（日本帝国，中华民国官方和泰国佛历）EE全时代的名字（日本帝国，中华民国官方和泰国佛历）FF[1..9]在FF之后使用数字1到9指定返回的日期时间值的小数部分中的位数。如果未指定数字，则Oracle数据库将使用为datetime数据类型或数据类型的默认精度指定的精度。时间戳和间隔格式有效，但DATE格式不存在。例子：'HH:MI:SS.FF'SELECTTO_CHAR(SYSTIMESTAMP,'SS.FF3')fromdual;FM返回没有前导或尾随空格的值。FX需要字符数据和格式模型之间的精确匹配。HHHH12一天中的小时（1-12）。HH24一天中的小时（0-23）。IW一年中的一周（1-52或1-53）基于ISO标准。IYYIYIISO年份的最后3个，2个或1个数字。IYYY基于ISO标准的4位数年份。J朱利安日；公元前4712年1月1日以来的天数。用J指定的数字必须是整数。MI分钟（0-59）。MM月（01-12;1月=01）。MON月的简称，和国家有关系NLS_DATE_LANGUAGE，例如04在中文环境下用4月表示。MONTH月的名称，国家有关系NLS_DATE_LANGUAGE,目前在中文下04表示为4月。PMP.M.同am,a.m.表示下午Q季度（1-4）RM用罗马数字表示的月份，I,II,III,IV,V,VI,VII,VIII,IX,X,XI,XIIRR只用两位数就可以存储21世纪的20世纪日期。RRRR一年。接受4位或2位输入。如果是2位数，则提供与RR相同的返回值。SS秒（0-59），一分钟内SSSSS一天从午夜开始的累积秒数。(0-86399)TS以短时间格式返回值。TZD夏令时信息。TZD值是带有夏令时信息的缩写时区字符串。它必须与TZR中指定的区域相对应。时间戳和间隔格式有效，但DATE格式不存在。TZH时区小时。（请参阅TZMformat元素。）以时间戳和间隔格式有效，但不以DATE格式表示。TZM时区分钟。（请参阅TZHformat元素。）以时间戳和间隔格式有效，但不以DATE格式表示。TZR时区地区信息。该值必须是数据库中支持的时区之一。时间戳和间隔格式有效，但DATE格式不存在。WW一年中的一周（1-53），其中第1周从一年的第一天开始并持续到一年的第七天。W每周的一周（1-5），其中第1周从该月的第一天开始，到第七周结束。X本地基数字符。Y,YYY四位年，用逗号分隔YEARSYEAR发音表达的年，例如2008=twothousandeightYYYYSYYYY四位年，S前缀表示公元前BCYYYYYY一次表示后面3，2，1位的年，例如2008可以分别取值为008,08,8"}, "md/function/NULL函数.html": {"url": "md/function/NULL函数.html", "title": "NULL函数", "keywords": "", "body": "NULL函数NULL函数是用来处理空值时比较好的选择。1.NVL(expr1,expr2)函数。替换NULL值，表示如果expr1为NULL值，则返回expr2的值，否则返回expr1的值。该函数要求两个参数类型一致，至少相互间能进行隐式的转换，否则会提示出错。例如，下面的示例将查询emp表中的记录，如果记录中有该字段为空的，则用0替换。相关脚本如下：selectename,nvl(comm,0)fromemp;2.NVL2(expr1,expr2,expr3)函数。该函数同NVL类似，不同的是当expr1为NULL时，函数返回expr3的值；当expr1不为空时，则返回expr2的值。selectename,comm,nvl2(comm,&#39;没有奖金&#39;,&#39;有奖金&#39;)fromemp;3.COALESCE(expr)函数。返回列表中第一个不为null的表达式。如果都为null，则返回一个null。示例脚本如下：selectcoalesce(null,9-9,null)fromdual;4.LNNVL(condition)函数。该函数可以得到除了condition要求条件之外的数据，包括NULL的条件，通常用于WHERE条件中。下面的示例将得到emp表中奖金低于1000的人，并包含奖金为NULL的人。示例脚本如下：select*fromempwherelnnvl(comm&lt;1000);"}, "md/function/聚合函数.html": {"url": "md/function/聚合函数.html", "title": "聚合函数", "keywords": "", "body": "聚合函数聚合函数经常配合GROUPBY或HAVING子句使用，当然它们也可以单独使用。该类型的函数中都会忽略列值为NULL的数据。1.AVG([distinct|all]expr)函数。该函数可求取指定列的平均值，表示某组的平均值，返回数值类型。各参数表示的具体含义如下：distinct：去除重复的值。all：表示所有的值，包括重复的值，也是默认值。expr：表达式。只能是数值类型。1.1.这里以emp的comm字段为例，演示最简单的使用方法。测试脚本如下：selectavg(comm),avg(allcomm)fromemp;1.2.与GROUPBY子句一起使用，或只用某个范围内的值。下面演示使用GROUPBY子句查询各部门平均工资。演示脚本如下：selectavg(sal)fromempgroupbydeptno;1.3.使用该函数时，WHERE条件子句中可以使用条件。示例将演示工资大于2000的所有人的平均工资。演示脚本如下：selectavg(sal)fromempwheresal＞2000;2.COUNT(*|distinctexpr)函数。该函数可以用来计算记录的数量或某列的个数。函数中必须指定列名，或全选使用星号。其中各参数表示的含义如下：*：表示计算所有记录。distinct：表示去除重复的记录。all：代表所有的，是默认选项。expr：要计算的对象，通常是表的列。下面以几个示例来演示COUNT函数的使用方法。查询emp表的所有记录数。演示脚本如下：selectcount(*)fromproductinfo;查询emp表的sal字段低于5000的不重复的记录数。演示脚本如下：selectcount(distinctsal)fromempwheresal＜3000;3.MAX([distinct|all]expr)函数。该函数可以返回指定列中的最大值，通常都用在WHERE子句中的子查询。其中各参数表示的含义如下：distinct：表示去除重复的记录。all：代表所有的，是默认选项。expr：表的列。查询emp表中工资最高的记录，演示脚本如下：select*fromempwheresal=(selectmax(sal)fromemp);同该函数效果相反但用法一致的有MIN([distinct|all]expr)函数，此函数获取指定列中的最小值。这里不再给出示例。4.SUM([distinct|all]expr)函数。该函数不同于COUNT函数，它分组计算指定列的和，如果不使用分组，则函数默认把整个表作为一组。各参数代表含义如下：distinct：表示去除重复的记录。all：代表所有的，是默认选项。expr：表的列。下面示例将演示利用该函数计算各部门工资总和。演示脚本如下：selectsum(allsal)fromempgroupbydeptno;"}, "md/function/其他函数.html": {"url": "md/function/其他函数.html", "title": "其他函数", "keywords": "", "body": "其他函数前面介绍了单行函数以及聚合函数，下面介绍几个不属于前面类型的函数，主要是系统环境和编码方面的函数。1.USER函数。该函数返回当前会话的登录名。演示脚本如下：selectuserfromdual;2.USERENV(parameter)函数。返回当前会话的信息。例如，当参数为Language时可以返回当前会话对应的语言、字符集等。SESSIONID可返回当前会话ID。ISDBA可返回当前用户是否DBA。示例将演示返回当前用户是否DBA用户。脚本如下：selectuserenv(&#39;ISDBA&#39;)fromdual;3.SYS_CONTEXT(namespace,parameter)函数。该函数可以得到Oracle已经创建的context，名为USERENV的属性对应值。示例将得到当前会话对应的用户名。脚本如下：selectsys_context(&#39;USERENV&#39;,&#39;SESSION_USER&#39;)session_userfromdual;4.DECODE函数。该函数的具体语法是DECODE(expr,search,result[,search1,result1](,default))。该函数的执行过程是，当expr符合条件search时就返回result的值，该过程可以重复多个，如果最后没有匹配的结果，可以返回默认值default，注意它是一对一的匹配过程。下面的示例将演示emp中工资高于2000的就显示“高薪”，少于或等于2000则显示“低薪”。脚本如下：selectsal,decode(sign(sal-100),1,&#39;高薪&#39;,-1,&#39;低薪&#39;,0,&#39;低薪&#39;)fromemp;从函数中可以看出它只能和单一的条件匹配，如果要想得到某个范围，可以利用其他的函数做辅助。"}, "md/exercise/index.html": {"url": "md/exercise/index.html", "title": "Oracle 练习汇总", "keywords": "", "body": "Oracle练习汇总1.表结构介绍奖金表：bonus序号列名类型说明1enameVARCHAR2(50)姓名2jobVARCHAR2(9)职位3salNUMBER薪水4commNUMBER奖金（佣金）部门表：dept序号列名类型说明1DEPTNONUMBER(2)部门编号，主键2DNAMEVARCHAR2(14)部门名称3LOCVARCHAR2(13)部门位置雇员表：emp序号列名类型说明1EMPNONUMBER(4)员工编号，EMP表主键2ENAMEVARCHAR2(50)员工姓名3JOBVARCHAR2(9)员工工作4MGRNUMBER(4)员工的领导编号，引用EMPNO5HIREDATEDATE入职日期6SALNUMBER(7,2)员工工资7COMMNUMBER(7,2)员工奖金8DEPTNONUMBER(2)员工部门编号，是表DEPT的外键。薪水等级表：salgrade序号列名类型说明1GRADENUMBER等级2LOSALNUMBER此等级下最低工资3HISALNUMBER此等级下最高工资学生表：STUDENT序号列名类型说明1IDNUMBER学生的编号2NAMEVARCHAR2(50)名字成绩表：ACHIEVEMENT序号列名类型说明1IDNUMBER学生的编号2NAMENUMBER成绩成绩表：userorgz序号列名类型说明1IDNUMBER编号2USERNAMEVARCHAR2(50)用户名3MOBILEPHONENUMBER手机号码2.创建数据SQLCreateData.sql"}, "md/exercise/001.html": {"url": "md/exercise/001.html", "title": "Oracle 练习 001", "keywords": "", "body": "Oracle练习0011.题目新建一个用户tom，密码设置为love2.实例点我看答案CREATEUSERtomIDENTIFIEDBYloveACCOUNTUNLOCK;"}, "md/exercise/002.html": {"url": "md/exercise/002.html", "title": "Oracle 练习 002", "keywords": "", "body": "Oracle练习0021.题目给用户tom授权登录，访问资源的权限2.实例点我看答案GRANTCONNECT,RESOURCETOtom;"}, "md/exercise/003.html": {"url": "md/exercise/003.html", "title": "Oracle 练习 003", "keywords": "", "body": "Oracle练习0031.题目锁定tom用户的账户，使其不能登录2.实例点我看答案ALTERUSERtomACCOUNTLOCK;"}, "md/exercise/004.html": {"url": "md/exercise/004.html", "title": "Oracle 练习 004", "keywords": "", "body": "Oracle练习0041.题目给tom用户解锁2.实例点我看答案ALTERUSERtomACCOUNTUNLOCK;"}, "md/exercise/005.html": {"url": "md/exercise/005.html", "title": "Oracle 练习 005", "keywords": "", "body": "Oracle练习0051.题目收回tom用户的登录、访问资源的权限2.实例点我看答案REVOKECONNECT,RESOURCEFROMtom;"}, "md/exercise/006.html": {"url": "md/exercise/006.html", "title": "Oracle 练习 006", "keywords": "", "body": "Oracle练习0061.题目删除用户tom2.实例点我看答案DROPUSERtom;"}, "md/exercise/007.html": {"url": "md/exercise/007.html", "title": "Oracle 练习 007", "keywords": "", "body": "Oracle练习0071.题目创建表class_info字段名类型长度可选值c_id字符串20主键c_type字符串6UI、测试、开发c_position字符串20非空start_time日期c_status字符串6在读、毕业2.实例点我看答案CREATETABLEclass_info(c_idVARCHAR2(20)PRIMARYKEY,c_typeVARCHAR2(10)CHECK(c_typein(&#39;UI&#39;,&#39;测试&#39;,&#39;开发&#39;)),c_positionVARCHAR2(20)NOTNULL,start_timeDATE,c_statusVARCHAR2(10)CHECK(c_typein(&#39;在读&#39;,&#39;毕业&#39;)));"}, "md/exercise/008.html": {"url": "md/exercise/008.html", "title": "Oracle 练习 008", "keywords": "", "body": "Oracle练习0081.题目把表class_info改成class_info22.实例点我看答案renameclass_infotoclass_info2;"}, "md/exercise/009.html": {"url": "md/exercise/009.html", "title": "Oracle 练习 009", "keywords": "", "body": "Oracle练习0091.题目显示薪水大于2000，且工作类别是经理的雇员信息2.实例点我看答案select*fromempewheree.sal&gt;2000ande.job=&#39;经理&#39;;"}, "md/exercise/010.html": {"url": "md/exercise/010.html", "title": "Oracle 练习 010", "keywords": "", "body": "Oracle练习0101.题目显示年薪大于30000，工作类别不是经理的雇员信息2.实例点我看答案select*fromempewheree.sal*12&gt;30000ande.job!=&#39;经理&#39;;"}, "md/exercise/011.html": {"url": "md/exercise/011.html", "title": "Oracle 练习 011", "keywords": "", "body": "Oracle练习0111.题目显示薪水在1500到3000之间，工作类别以“M”开头的雇员信息2.实例点我看答案select*fromempewheree.salbetween1500and3000ande.joblike&#39;M%&#39;;"}, "md/exercise/012.html": {"url": "md/exercise/012.html", "title": "Oracle 练习 012", "keywords": "", "body": "Oracle练习0121.题目显示佣金为空并且部门号为20或30的雇员信息2.实例点我看答案select*fromempewheree.commisnulland(e.deptno=20ore.deptno=30);select*fromempewheree.commisnullande.deptnoin(20,30);"}, "md/exercise/013.html": {"url": "md/exercise/013.html", "title": "Oracle 练习 013", "keywords": "", "body": "Oracle练习0131.题目显示佣金不为空或者部门号为20的雇员信息，要求按照薪水降序排列2.实例点我看答案select*fromempewheree.commisnotnullore.deptno=20orderbye.saldesc;"}, "md/exercise/014.html": {"url": "md/exercise/014.html", "title": "Oracle 练习 014", "keywords": "", "body": "Oracle练习0141.题目显示年薪大于30000工作类别不是经理，且部门号不是10和40的雇员信息，要求按照雇员姓名进行排序2.实例点我看答案select*fromempewheree.sal*12&gt;30000ande.job!=&#39;经理&#39;ande.deptnonotin(10,40)orderbye.ename;"}, "md/exercise/015.html": {"url": "md/exercise/015.html", "title": "Oracle 练习 015", "keywords": "", "body": "Oracle练习0151.题目选择在部门30中员工的所有信息2.实例点我看答案select*fromempewheree.deptno=30;"}, "md/exercise/016.html": {"url": "md/exercise/016.html", "title": "Oracle 练习 016", "keywords": "", "body": "Oracle练习0161.题目列出职位为经理的员工的编号，姓名2.实例点我看答案selecte.empno,e.enamefromempewheree.job=&#39;经理&#39;;"}, "md/exercise/017.html": {"url": "md/exercise/017.html", "title": "Oracle 练习 017", "keywords": "", "body": "Oracle练习0171.题目找出部门10中的经理和部门20中的普通员工2.实例点我看答案select*fromempewhere(e.deptno=10ande.job=&#39;经理&#39;)or(e.deptno=20ande.job=&#39;普通员工&#39;);"}, "md/exercise/018.html": {"url": "md/exercise/018.html", "title": "Oracle 练习 018", "keywords": "", "body": "Oracle练习0181.题目找出部门10中既不是经理也不是普通员工，而且工资大于等于2000的员工2.实例点我看答案select*fromempewheree.deptno=10ande.jobnotin(&#39;经理&#39;,&#39;普通员工&#39;)ande.sal&gt;=2000;"}, "md/exercise/019.html": {"url": "md/exercise/019.html", "title": "Oracle 练习 019", "keywords": "", "body": "Oracle练习0191.题目找出没有奖金或者奖金低于500的员工2.实例点我看答案select*fromempewheree.commisnullore.comm&lt;500;"}, "md/exercise/020.html": {"url": "md/exercise/020.html", "title": "Oracle 练习 020", "keywords": "", "body": "Oracle练习0201.题目显示雇员姓名，根据其服务年限，将最老的雇员排在最前面2.实例点我看答案selecte.enamefromempeorderbye.hiredateasc;"}, "md/exercise/021.html": {"url": "md/exercise/021.html", "title": "Oracle 练习 021", "keywords": "", "body": "Oracle练习0211.题目找出有奖金的员工的不同工作2.实例点我看答案selectdistincte.jobfromempewheree.commisnotnull;"}, "md/exercise/022.html": {"url": "md/exercise/022.html", "title": "Oracle 练习 022", "keywords": "", "body": "Oracle练习0221.题目找出姓名中不带R这个字母的员工2.实例点我看答案select*fromempewheree.enamenotlike&#39;%R%&#39;;"}, "md/exercise/023.html": {"url": "md/exercise/023.html", "title": "Oracle 练习 023", "keywords": "", "body": "Oracle练习0231.题目显示所有员工，按工作降序排列，若相同，则按工资升序排序2.实例点我看答案select*fromempeorderbye.jobdesc,e.salasc;"}, "md/exercise/024.html": {"url": "md/exercise/024.html", "title": "Oracle 练习 024", "keywords": "", "body": "Oracle练习0241.题目查找出不属于任何部门的员工2.实例点我看答案select*fromempewheree.deptnoisnull;"}, "md/exercise/025.html": {"url": "md/exercise/025.html", "title": "Oracle 练习 025", "keywords": "", "body": "Oracle练习0251.题目创建一查询，显示与BLAKE在同一部门工作的雇员的姓名和受雇日期、部门编号，但是BLAKE不包含在内。2.实例点我看答案selecte.ename,e.hiredate,e.deptnofromempejoinempe1one.deptno=e1.deptnoande1.ename=&#39;BLAKE&#39;wheree.ename!=&#39;BLAKE&#39;;"}, "md/exercise/026.html": {"url": "md/exercise/026.html", "title": "Oracle 练习 026", "keywords": "", "body": "Oracle练习0261.题目显示位置在达拉斯的部门内的雇员姓名、工作。2.实例点我看答案selecte.ename,e.jobfromempejoindeptdone.deptno=d.deptnoandd.loc=&#39;达拉斯&#39;;"}, "md/exercise/027.html": {"url": "md/exercise/027.html", "title": "Oracle 练习 027", "keywords": "", "body": "Oracle练习0271.题目显示被KING直接管理的雇员的姓名以及薪水。2.实例点我看答案selecte.ename,e.salfromempejoinempe1one.mgr=e1.empnoande1.ename=&#39;KING&#39;;"}, "md/exercise/028.html": {"url": "md/exercise/028.html", "title": "Oracle 练习 028", "keywords": "", "body": "Oracle练习0281.题目创建一查询，显示能获得与SCOTT一样薪水的其他雇员的姓名、受雇日期以及薪水。2.实例点我看答案selecte.ename,e.hiredate,e.salfromempejoinempe1one.sal=e1.salande1.ename=&#39;SCOTT&#39;wheree.ename!=&#39;SCOTT&#39;;"}, "md/exercise/029.html": {"url": "md/exercise/029.html", "title": "Oracle 练习 029", "keywords": "", "body": "Oracle练习0291.题目查找出工资等级不为4级的员工的员工名字，部门名字，部门位置。2.实例点我看答案selecte.ename,d.dname,d.loc,s.gradefromempejoinsalgradesone.salbetweens.losalands.hisalands.grade!=4leftjoindeptdone.deptno=d.deptno;"}, "md/exercise/030.html": {"url": "md/exercise/030.html", "title": "Oracle 练习 030", "keywords": "", "body": "Oracle练习0301.题目找出每个月倒数第三天受雇的员工（如：2009-5-29）2.实例点我看答案select*fromempewheree.hiredate=last_day(e.hiredate)-2;"}, "md/exercise/031.html": {"url": "md/exercise/031.html", "title": "Oracle 练习 031", "keywords": "", "body": "Oracle练习0311.题目找出25年前雇的员工2.实例点我看答案select*fromempewhere(sysdate-e.hiredate)/12/30&gt;25;select*fromempewheremonths_between(sysdate,e.hiredate)/12&gt;25;select*fromempewhereadd_months(sysdate,-25*12)&gt;=e.hiredate;"}, "md/exercise/032.html": {"url": "md/exercise/032.html", "title": "Oracle 练习 032", "keywords": "", "body": "Oracle练习0321.题目所有员工名字前加上Dear,并且名字首字母大写2.实例点我看答案selecte.ename,&#39;Dear&#39;||initcap(e.ename)fromempe;selecte.ename,concat(&#39;Dear&#39;,initcap(e.ename))fromempe;"}, "md/exercise/033.html": {"url": "md/exercise/033.html", "title": "Oracle 练习 033", "keywords": "", "body": "Oracle练习0331.题目找出姓名为5个字符的员工2.实例点我看答案select*fromempewherelength(e.ename)=5;"}, "md/exercise/034.html": {"url": "md/exercise/034.html", "title": "Oracle 练习 034", "keywords": "", "body": "Oracle练习0341.题目显示所有员工的姓名的第一个字2.实例点我看答案selecte.ename,substr(e.ename,1,1)fromempe;"}, "md/exercise/035.html": {"url": "md/exercise/035.html", "title": "Oracle 练习 035", "keywords": "", "body": "Oracle练习0351.题目找到2月份受雇的员工2.实例点我看答案select*fromempewhereto_char(e.hiredate,&#39;mm&#39;)=2;"}, "md/exercise/036.html": {"url": "md/exercise/036.html", "title": "Oracle 练习 036", "keywords": "", "body": "Oracle练习0361.题目对薪水是2000元以下的员工进行查询，如果没有发奖金，每人奖金100元。2.实例点我看答案selectename,job,sal,nvl(comm,100)fromempwheresal&lt;2000;"}, "md/exercise/037.html": {"url": "md/exercise/037.html", "title": "Oracle 练习 037", "keywords": "", "body": "Oracle练习0371.题目对EMP表中薪水为2000元以下的员工进行查询，如果没有奖金，则显示奖金为200元，如果有奖金，则在原来的奖金基础上加100元。2.实例点我看答案selectename,job,sal,nvl2(comm,comm+100,200)&quot;comm&quot;fromempwheresal&lt;2000;"}, "md/exercise/038.html": {"url": "md/exercise/038.html", "title": "Oracle 练习 038", "keywords": "", "body": "Oracle练习0381.题目列出至少有一个员工的所有部门2.实例点我看答案select*fromdeptdwhered.deptnoin(selecte.deptnofromempegroupbye.deptnohavingcount(e.ename)&gt;0);"}, "md/exercise/039.html": {"url": "md/exercise/039.html", "title": "Oracle 练习 039", "keywords": "", "body": "Oracle练习0391.题目查询出KING所在部门的工作年限最大的员工名字2.实例点我看答案selecte.ename,e.hiredate,e.deptnofromempewheree.hiredate=(selectmin(hiredate)fromempwheredeptnoin(selectdeptnofromempwhereename=&#39;KING&#39;))ande.deptno=(selectdeptnofromempwhereename=&#39;KING&#39;);"}, "md/exercise/040.html": {"url": "md/exercise/040.html", "title": "Oracle 练习 040", "keywords": "", "body": "Oracle练习0401.题目查询出KING所在部门的部门号、部门名称、部门人数2.实例点我看答案selectd.deptno,d.dname,t.人数fromdeptd,(selectcount(*)人数,deptnofromempwheredeptnoin(selectdeptnofromempwhereename=&#39;KING&#39;)groupbydeptno)twhered.deptno=t.deptno;selectd.dname,d.deptno,t2.*fromdeptd,(selectt.人数,t.deptnofrom(selectcount(*)人数,deptnofromempgroupbydeptno)twheret.deptnoin(selectdeptnofromempwhereename=&#39;KING&#39;))t2whered.deptno=t2.deptno;selecte.deptno部门号,d.dname部门名称,(selectcount(*)from(selectdeptnofromempwheredeptnoin(selectdeptnofromempwhereename=&#39;KING&#39;)))人数fromempe,deptdwheree.deptno=d.deptnoande.ename=&#39;KING&#39;;"}, "md/exercise/041.html": {"url": "md/exercise/041.html", "title": "Oracle 练习 041", "keywords": "", "body": "Oracle练习0411.题目算出部门30中得到最多奖金的员工姓名2.实例点我看答案selectename,comm,deptnofromempwherecomm=(selectmax(comm)fromempwheredeptno=30)anddeptno=30;"}, "md/exercise/042.html": {"url": "md/exercise/042.html", "title": "Oracle 练习 042", "keywords": "", "body": "Oracle练习0421.题目统计各部门下平均工资大于500的部门2.实例点我看答案selectdeptno,avg(sal)fromempgroupbydeptnohavingavg(sal)&gt;500;"}, "md/exercise/043.html": {"url": "md/exercise/043.html", "title": "Oracle 练习 043", "keywords": "", "body": "Oracle练习0431.题目按部门统计员工数，查出员工数最多的部门的第二名到第五名（列出部门名字，部门位置）2.实例点我看答案selectd.dname,d.loc,d.deptnofromdeptd,(selectrownumno,deptnofrom(selectcount(*)人数,deptnofromempgroupbydeptnoorderby人数desc))ewheree.nobetween2and5ande.deptno=d.deptno;"}, "md/exercise/044.html": {"url": "md/exercise/044.html", "title": "Oracle 练习 044", "keywords": "", "body": "Oracle练习0441.题目查找出部门10和部门20中，工资最高第3名到第5名的员工的员工名字，部门名字，部门位置2.实例点我看答案selectd.dname,d.loc,e.enamefromdeptd,(selectename,sal,deptno,rownumnofrom(select*fromempwheredeptnoin(10,20)orderbysaldesc))ewhered.deptno=e.deptnoande.nobetween3and5;"}, "md/exercise/045.html": {"url": "md/exercise/045.html", "title": "Oracle 练习 045", "keywords": "", "body": "Oracle练习0451.题目从EMP表中查询如果其工资大于3500，则显示高工资。工资大于2000小于等于3500，则显示中等工资。工资小于等于2000的则显示低等工资。2.实例点我看答案selecte.ename,e.sal,(casewhene.sal&gt;3500then&#39;高工资&#39;whene.sal&gt;2000then&#39;中等工资&#39;else&#39;低等工资&#39;end)工资等级fromempe;"}, "md/exercise/046.html": {"url": "md/exercise/046.html", "title": "Oracle 练习 046", "keywords": "", "body": "Oracle练习0461.题目已知有如下数据表：A月份部门业绩一月份A10一月份B10一月份C5二月份A8二月份B9三月份A8写出相应SQL，得到以下结果集：部门一月份二月份三月份A1088B1090C5002.实例点我看答案select部门,max(case月份when&#39;一月份&#39;then业绩else0end)一月份,max(case月份when&#39;二月份&#39;then业绩else0end)二月份,max(case月份when&#39;三月份&#39;then业绩else0end)三月份fromAgroupby部门;"}, "md/exercise/047.html": {"url": "md/exercise/047.html", "title": "Oracle 练习 047", "keywords": "", "body": "Oracle练习0471.题目从EMP表中查询统计各部门工资低于（包含）2000的人数与高于2000的人数2.实例点我看答案selecte.deptno,count(casewhene.sal&lt;=2000thene.salelsenullend)&quot;&lt;=2000&quot;,count(casewhene.sal&gt;2000thene.salelsenullend)&quot;&gt;2000&quot;fromempegroupbye.deptno;"}, "md/exercise/048.html": {"url": "md/exercise/048.html", "title": "Oracle 练习 048", "keywords": "", "body": "Oracle练习0481.题目从Student表和Achievement表中查询成绩&gt;85分的学生的姓名2.实例点我看答案selects.id,s.name,a.markfromstudents,achievementawheres.id=a.idanda.mark&gt;85;"}, "md/exercise/049.html": {"url": "md/exercise/049.html", "title": "Oracle 练习 049", "keywords": "", "body": "Oracle练习0491.题目从Student表和Achievement表中查询成绩&gt;=90分的人数2.实例点我看答案selectcount(*)fromachievementawherea.mark&gt;=90;"}, "md/exercise/050.html": {"url": "md/exercise/050.html", "title": "Oracle 练习 050", "keywords": "", "body": "Oracle练习0501.题目操作Student表和Achievement表Robert此次考试考了80分，但是成绩没能录入表中，请将其成绩添加进去2.实例点我看答案insertintoachievement(id,mark)values((selectidfromstudentwherename=&#39;Robert&#39;),80);"}, "md/exercise/051.html": {"url": "md/exercise/051.html", "title": "Oracle 练习 051", "keywords": "", "body": "Oracle练习0511.题目操作Student表和Achievement表将Rose的成绩修改为872.实例点我看答案updateachievementaseta.mark=87wherea.id=(selects.idfromstudentswherename=&#39;Rose&#39;);"}, "md/exercise/052.html": {"url": "md/exercise/052.html", "title": "Oracle 练习 052", "keywords": "", "body": "Oracle练习0521.题目操作Student表和Achievement表删除Betty的记录2.实例点我看答案deletefromachievementwhereid=(selectidfromstudentwherename=&#39;Betty&#39;);deletefromstudentwherename=&#39;Betty&#39;;"}, "md/exercise/053.html": {"url": "md/exercise/053.html", "title": "Oracle 练习 053", "keywords": "", "body": "Oracle练习0531.题目查询userorgz表，统计出有手机号码重复的手机号码以及重复个数，并根据重复数量降序排序且手机重复个数必须大于12.实例点我看答案selectmobilephone,count(*)fromuserorgzgroupbymobilephonehavingcount(*)&gt;1orderbycount(*)desc;"}, "md/exercise/选择题.html": {"url": "md/exercise/选择题.html", "title": "Oracle 选择题", "keywords": "", "body": "Oracle选择题1.题目SQL指的是？A.StrongQuestionLanguageB.StructuredQuestionLanguageC.StructuredQueryLanguage哪个SQL语句用于从数据库中提取数据？A.SELECTB.OPENC.GETD.EXTRACT哪条SQL语句用于更新数据库中的数据？A.UPDATEB.SAVEC.SAVEASD.MODIFY哪条SQL语句用于删除数据库中的数据？A.REMOVEB.DELETEC.COLLAPSE哪条SQL语句用于在数据库中插入新数据？A.ADDNEWB.INSERTNEWC.INSERTINTOD.ADDRECORD使用SQL，如何从名为“Persons”的表中选择名为“FirstName”的列？A.EXTRACTFirstNameFROMPersonsB.SELECTFirstNameFROMPersonsC.SELECTPersons.FirstName使用SQL，如何从名为“Persons”的表中选择所有列？A.SELECTPersonsB.SELECT*.PersonsC.SELECT[all]FROMPersonsD.SELECT*FROMPersons使用SQL，如何从名为“Persons”的表中选择“FirstName”列的值为“Peter”的所有记录？A.SELECT[all]FROMPersonsWHEREFirstName='Peter'B.SELECT[all]FROMPersonsWHEREFirstNameLIKE'Peter'C.SELECT*FROMPersonsWHEREFirstName='Peter'D.SELECT*FROMPersonsWHEREFirstName&lt;&gt;'Peter'使用SQL，如何从名为“Persons”的表中选择所有记录，其中“FirstName”列的值以“a”开头？A.SELECT*FROMPersonsWHEREFirstNameLIKE'％a'B.SELECT*FROMPersonsWHEREFirstName='％a％'C.SELECT*FROMPersonsWHEREFirstName='a'D.SELECT*FROMPersonsWHEREFirstNameLIKE'a％'如果列出的任何条件为真，OR运算符将显示一条记录。如果列出的所有条件都为真，AND运算符将显示一条记录A.TrueB.False使用SQL，如何在表Persons中选择FirstName等于Peter而LastName等于Jackson的所有记录？A.SELECTFirstName='Peter',LastName='Jackson'FROMPersonsB.SELECT*FROMPersonsWHEREFirstName='Peter'ANDLast-Name='Jackson'C.SELECT*FROMPersonsWHEREFirstName&lt;&gt;'Peter'ANDLast-Name&lt;&gt;'Jackson'使用SQL，如何按字母顺序选取Persons表中LastName介于（包含）Hansen和Pettersen的所有记录？A.SELECTLastName&gt;'Hansen'ANDLastName&lt;'Pettersen'FROMPersonsB.SELECT*FROMPersonsWHERELastNameBETWEEN'Hansen'AND'Pet-tersen'C.SELECT*FROMPersonsWHERELastName&gt;'Hansen'ANDLast-Name&lt;'Pettersen'哪条SQL语句可返回唯一不同的值？A.SELECTDISTINCTB.SELECTDIFFERENT哪个SQL关键词用于对结果集进行排序？A.SORTB.ORDERC.ORDERBYD.SORTBY使用SQL，如何根据\"FirstName\"列降序地从\"Persons\"表返回所有记录？A.SELECT*FROMPersonsSORTBY'FirstName'DESCB.SELECT*FROMPersonsSORT'FirstName'DESCC.SELECT*FROMPersonsORDERFirstNameDESCD.SELECT*FROMPersonsORDERBYFirstNameDESC使用SQL，如何向\"Persons\"表插入新的记录？A.INSERT('Jimmy','Jackson')INTOPersonsB.INSERTVALUES('Jimmy','Jackson')INTOPersonsC.INSERTINTOPersonsVALUES('Jimmy','Jackson')使用SQL，如何向\"Persons\"表中的\"LastName\"列插入\"Olsen\"？A.INSERTINTOPersons(LastName)VALUES('Olsen')B.INSERT('Olsen')INTOPersons(LastName)C.INSERTINTOPersons('Olsen')INTOLastName使用SQL，如何把\"Persons\"表中\"LastName\"列的\"Hansen\"改为\"Nilsen\"？A.UPDATEPersonsSETLastName='Hansen'INTOLastName='Nilsen'B.MODIFYPersonsSETLastName='Hansen'INTOLastName='NilsenC.UPDATEPersonsSETLastName='Nilsen'WHERELastName='Hansen'D.MODIFYPersonsSETLastName='Nilsen'WHERELastName='Hansen'使用SQL，如何在\"Persons\"表中删除\"FirstName\"等于\"Peter\"的纪录？A.DELETEFirstName='Peter'FROMPersonsB.DELETEROWFirstName='Peter'FROMPersonsC.DELETEFROMPersonsWHEREFirstName='Peter'使用SQL，如何返回\"Persons\"表中记录的数目？A.SELECTNO(*)FROMPersonsB.SELECTCOUNT(*)FROMPersonsC.SELECTLEN(*)FROMPersonsD.SELECTCOLUMNS(*)FROMPersons哪个操作符用于选择范围内的值？A.BETWEENB.RANGEC.WITHINNOTNULL约束强制约束列不接受空值。A.FalseB.True哪个操作符用于在列中模糊搜索？A.GETB.LIKEC.FROM哪个SQL语句用于在数据库中创建表？A.CREATEDATABASETABLEB.CREATEDBC.CREATEDATABASETABD.CREATETABLE2.答案点我看答案12345678910CAABCBDCDA11121314151617181920BBACDCACCB21222324ABBD"}}